<?php
/**
 * *
 *  *
 *  * Copyright Â© 2017 Forix. All rights reserved.
 *  * See COPYING.txt for license details.
 *
 */
namespace Forix\ProductLabel\Model;

use Forix\ProductLabel\Controller\Adminhtml\AbstractRule;
use Magento\Rule\Model\AbstractModel;
use Magento\Framework\Model\Context;
use Magento\Framework\Registry;
use Magento\Framework\Data\FormFactory;
use Magento\Framework\Stdlib\DateTime\TimezoneInterface;
use Forix\ProductLabel\Model\Rule\Condition\CombineFactory;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Rule\Model\Action\CollectionFactory;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\CatalogRule\Model\Rule as CatalogRule;
use Magento\Store\Model\StoreManagerInterface;

/**
 * Class Rule
 *
 * @package Forix\ProductLabel\Model
 * @method array getStoreIds()
 * @method array getStoreId()
 * @method array getCustomerGroupIds()
 * @method string getCategoryImage()
 * @method string getProductImage()
 * @method string getConditionsSerialized()
 * @method string getCategoryText()
 * @method string getCategoryPosition()
 * @method string getCategoryCssBackground()
 * @method string getProductCssBackground()
 * @method string getProductPosition()
 * @method string getProductText()
 * @method int getProductDisplay()
 * @method int getType()
 */
class Rule extends AbstractModel
{
    /**
     * Prefix of model events names
     *
     * @var string
     */
    protected $_eventPrefix = 'product_label';

    /**
     * Parameter name in event
     *
     * In observe method you can use $observer->getEvent()->getLabel() in this case
     *
     * @var string
     */
    protected $_eventObject = 'label';

    /**
     * @var \Magento\CatalogRule\Model\Rule\Condition\CombineFactory
     */
    protected $_combineFactory;

    /**
     * @var \Magento\CatalogRule\Model\Rule\Action\CollectionFactory
     */
    protected $_actionCollectionFactory;

    /**
     * @var StoreManagerInterface
     */
    protected $_storeManager;

    /**
     * @var ImageUploader
     */
    protected $imageUploader;

    /**
     * Rule constructor.
     *
     * @param Context $context
     * @param Registry $registry
     * @param FormFactory $formFactory
     * @param TimezoneInterface $localeDate
     * @param CombineFactory $combineFactory
     * @param CollectionFactory $actionCollectionFactory
     * @param StoreManagerInterface $storeManager
     * @param ImageUploader $imageUploader
     * @param AbstractResource|null $resource
     * @param AbstractDb|null $resourceCollection
     * @param array $relatedCacheTypes
     * @param array $data
     */
    public function __construct(
        Context $context,
        Registry $registry,
        FormFactory $formFactory,
        TimezoneInterface $localeDate,
        CombineFactory $combineFactory,
        CollectionFactory $actionCollectionFactory,
        StoreManagerInterface $storeManager,
        ImageUploader $imageUploader,
        AbstractResource $resource = null,
        AbstractDb $resourceCollection = null,
        array $relatedCacheTypes = [],
        array $data = []
    ) {
        $this->_combineFactory = $combineFactory;
        $this->_actionCollectionFactory = $actionCollectionFactory;
        $this->_storeManager = $storeManager;
        $this->imageUploader = $imageUploader;
        parent::__construct(
            $context,
            $registry,
            $formFactory,
            $localeDate,
            $resource,
            $resourceCollection,
            $data
        );
    }


    protected function _afterLoad()
    {
        $this->setData('hello', 666);
        return parent::_afterLoad(); // TODO: Change the autogenerated stub
    }

    /**
     * Init resource model and id field
     *
     * @return void
     */
    public function _construct()
    {
        $this->_init(ResourceModel\Rule::class);
        $this->setIdFieldName('rule_id');
    }

    /**
     * Getter for rule conditions collection
     *
     * @return \Magento\Rule\Model\Condition\Combine
     */
    public function getConditionsInstance()
    {
        return $this->_combineFactory->create();
    }

    /**
     * Getter for rule actions collection
     *
     * @return \Magento\CatalogRule\Model\Rule\Action\Collection
     */
    public function getActionsInstance()
    {
        return $this->_actionCollectionFactory->create();
    }

    /**
     * @param string $formName
     * @return string
     */
    public function getConditionsFieldSetId($formName = '')
    {
        return $formName . 'rule_conditions_fieldset_' . $this->getId();
    }

    /**
     * @param string $formName
     * @return string
     */
    public function getActionsFieldSetId($formName = '')
    {
        $this->getActions();
        return $formName . 'rule_actions_fieldset_' . $this->getId();
    }

    public function getCategoryImageUrl()
    {
        return $this->getImageUrl('category_image');
    }

    public function getProductImageUrl()
    {
        return $this->getImageUrl('product_image');
    }

    /**
     * @param $type
     * @return bool|string
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    protected function getImageUrl($type)
    {
        $url = false;
        $image = $this->getData($type);
        $basePath = $this->imageUploader->getBasePath();
        if ($image) {
            if (is_string($image)) {
                $url = $this->_storeManager->getStore()->getBaseUrl(
                    \Magento\Framework\UrlInterface::URL_TYPE_MEDIA
                ) . $basePath .'/' . $image;
            } else {
                throw new \Magento\Framework\Exception\LocalizedException(
                    __('Something went wrong while getting the image url.')
                );
            }
        }
        return $url;
    }

    /**
     * @return string
     */
    public function getTypeClass()
    {
        $type = $this->getData('type');

        switch ($type){
            case 1:
                return 'new';
            case 2:
                return 'sale';
            case 3:
                return 'custom';
            case 4:
                return 'best-seller';
            case 5:
                return 'coming-soon';
            default:
                return '';
        }
    }

    /**
     * @return mixed
     */
    public function getConditionsUnserialized()
    {
        return unserialize($this->getConditionsSerialized());
    }
}
