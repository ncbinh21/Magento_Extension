<?php
/**
 * Created by Hidro Le.
 * Job Title: Magento Developer
 * Project Name: M2.2.3-EE - Melfredborzall
 * Date: 13/06/2018
 * Time: 10:11
 */

namespace Forix\ProductWizard\Block\Wizard\Widget;

use Magento\Framework\View\Element\Template;
use Magento\Framework\Exception\LocalizedException;

/**
 * New products widget
 */
class Configurator extends \Magento\Framework\View\Element\Template implements \Magento\Widget\Block\BlockInterface, \Magento\Framework\DataObject\IdentityInterface
{
    protected $_eavConfig;
    protected $filterProvider;
    protected $_wizardRepository;

    public function __construct(
        Template\Context $context,
        \Magento\Cms\Model\Template\FilterProvider $filterProvider,
        \Forix\ProductWizard\Model\WizardRepository $wizardRepository,
        \Magento\Eav\Model\Config $eavConfig,
        array $data = [])
    {
        $this->_eavConfig = $eavConfig;
        $this->filterProvider = $filterProvider;
        $this->_wizardRepository = $wizardRepository;
        parent::__construct($context, $data);
    }

    public function getCacheKeyInfo()
    {
        $cacheInfo = parent::getCacheKeyInfo(); // TODO: Change the autogenerated stub
        return array_merge($cacheInfo, [$this->getNoResultMessage(), $this->getNoResultMessage(), ($this->getTargetWizard()->getId())]);
    }

    public function getNoResultMessage()
    {
        $noResultMessage = $this->getData('no_result_message');
        if ($noResultMessage) {
            $noResultMessage = str_replace(['{-', '-}'], ['{{', '}}'], $noResultMessage);
            $noResultMessage = $this->getFilterText(htmlspecialchars_decode($noResultMessage));
        }
        return $noResultMessage;
    }

    public function getFinalResultMessage()
    {
        $finalMessage = $this->getData('final_message');
        if ($finalMessage) {
            $finalMessage = str_replace(['{-', '-}'], ['{{', '}}'], $finalMessage);
            $finalMessage = $this->getFilterText(htmlspecialchars_decode($finalMessage));
        }
        return $finalMessage;
    }

    public function getStoreCode()
    {
        return $this->_storeManager->getStore()->getCode();
    }

    /**
     * @return \Forix\ProductWizard\Api\Data\WizardInterface|\Forix\ProductWizard\Model\Wizard|null
     * @throws LocalizedException
     */
    public function getTargetWizard()
    {
        if ($wizardId = $this->getData('target_configurator')) {
            return $this->_wizardRepository->getById($wizardId);
        }
        return null;
    }

    /**
     * @return \Magento\Eav\Model\Entity\Attribute\AbstractAttribute|null
     */
    public function getAttribute()
    {
        if ($this->getAttributeCode()) {
            try {
                return $this->_eavConfig->getAttribute(\Magento\Catalog\Model\Product::ENTITY, $this->getAttributeCode());
            } catch (LocalizedException $e) {
                $this->_logger->debug(implode('|', [$e->getMessage(), get_class($this)]));
                return null;
            }
        }
        return null;
    }

    /**
     * @return string
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function getAttributeLabel()
    {
        $attribute = $this->getAttribute();
        if (null !== $attribute) {
            return $attribute->getDefaultFrontendLabel();
        }
        return '';
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return $this->getData('title');
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->getData('description');
    }

    /**
     * @return string
     */
    public function getAttributeCode()
    {
        return $this->getData('attribute_code');
    }

    public function getFilterText($text)
    {
        try {
            return $this->filterProvider->getBlockFilter()->setStoreId($this->_storeManager->getStore()->getId())->filter($text);
        } catch (\Exception $e) {
        }
        return '';
    }

    /**
     * @return string
     */
    public function getTargetUrl()
    {
        if ($wizard = $this->getTargetWizard()) {
            return $this->getUrl() . ($wizard->getIdentifier());
        }
        return $this->getUrl();
    }

    protected $_noResultId;

    public function getNoResultId()
    {
        if (!$this->_noResultId) {
            $this->_noResultId = uniqid('no-result');
        }
        return $this->_noResultId;
    }

    protected $_configuratorSelect;

    public function getConfiguratorSelect()
    {
        if (!$this->_configuratorSelect) {
            $this->_configuratorSelect = uniqid();
        }
        return $this->_configuratorSelect;
    }

    public function getJsLayout()
    {
        return json_encode([
            "components" => [
                "drop_box_configurator" => [
                    "component" => "Forix_ProductWizard/js/widget/start-configurator-dropdown",
                    "config" => [
                        "resultHtml" => $this->getNoResultMessage(),
                        "finalMessage" => $this->getFinalResultMessage(),
                        'currentTargetWizardId' => $this->getTargetWizard() ? $this->getTargetWizard()->getId() : '',
                        "noResultId" => "#" . $this->getNoResultId(),
                        'baseUrl' => $this->getUrl(),
                        "validateWizardUrl" => '/forix-productwizard/getitems/',
                        "selectElement" => "." . $this->getConfiguratorSelect()
                    ],
                ]
            ]
        ]);
    }

    /**
     * Return unique ID(s) for each object in system
     *
     * @return string[]
     */
    public function getIdentities()
    {
        return [$this->getAttributeCode() . "-" . json_encode([$this->getNoResultMessage(), $this->getNoResultMessage(), ($this->getTargetWizard()->getId())])];
    }
}
