<?php


namespace Forix\ProductWizard\Model\ResourceModel;

use Forix\ProductWizard\Model\GroupItemFactory;
use Forix\ProductWizard\Model\GroupItemOptionFactory;
use Forix\ProductWizard\Model\ResourceModel\GroupItemOption\CollectionFactory;
use Magento\Catalog\Api\Data\ProductAttributeInterface;

class GroupItem extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
{
    const ITEM_OPTIONS_TABLE_NAME = 'forix_productwizard_group_item_option';
    protected $_eavAttributeRepository;
    protected $_groupItemOptionFactory;
    protected $_groupItemOptionInstance;
    protected $_groupFactory;
    protected $_date;
    protected $collectionOptionFactory;
    /**
     * @var \Magento\Catalog\Model\ProductFactory
     */
    protected $_productFactory;

    public function __construct(
        \Forix\ProductWizard\Model\ResourceModel\GroupItemOption\CollectionFactory $collectionOptionFactory,
        \Forix\ProductWizard\Model\GroupItemOptionFactory $groupItemOptionFactory,
        \Magento\Framework\Model\ResourceModel\Db\Context $context,
        \Magento\Eav\Api\AttributeRepositoryInterface $eavAttributeRepository,
        \Magento\Catalog\Model\ProductFactory $productFactory,
        \Forix\ProductWizard\Model\GroupFactory $groupFactory,
        \Magento\Framework\Stdlib\DateTime\DateTime $date,
        $connectionName = null
    )
    {
        $this->_date = $date;
        parent::__construct($context, $connectionName);
        $this->_eavAttributeRepository = $eavAttributeRepository;
        $this->_groupItemOptionFactory = $groupItemOptionFactory;
        $this->_productFactory = $productFactory;
        $this->_groupFactory = $groupFactory;
        $this->collectionOptionFactory = $collectionOptionFactory;
    }

    /**
     * @param \Forix\ProductWizard\Model\GroupItem $groupItem
     * @return \Forix\ProductWizard\Model\ResourceModel\GroupItemOption\Collection
     */
    public function getOptions($groupItem)
    {
        return $this->getGroupItemOptionInstance()->getCollection()->addGroupItemIdToFilter($groupItem->getId());
    }

    /**
     * @return \Forix\ProductWizard\Model\GroupItemOption
     */
    public function getGroupItemOptionInstance()
    {
        if (!isset($this->_groupItemOptionInstance)) {
            $this->_groupItemOptionInstance = $this->_groupItemOptionFactory->create();
        }
        return $this->_groupItemOptionInstance;
    }

    /**
     * Define resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init('forix_productwizard_group_item', 'group_item_id');
    }

    protected function loadRevertData($object)
    {
        $mainTable = $this->getMainTable();
        $idField = $this->getIdFieldName();
        $objectId = $object->getId();
        $data = [];
        if ($objectId) {
            $data = $this->_resources->getConnection()->fetchRow("select * from {$mainTable} where {$idField} = {$objectId}");
        }
        return $data;
    }


    protected function _afterDelete(\Magento\Framework\Model\AbstractModel $object)
    {
        $objectId = $object->getId();
        $optionValueTable = $this->_resources->getTableName(self::ITEM_OPTIONS_TABLE_NAME);
        $delete = "delete from {$optionValueTable} where item_id = $objectId and is_generated = 1";
        $this->_resources->getConnection()->query($delete);
        return parent::_afterDelete($object); // TODO: Change the autogenerated stub
    }

    /**
     * @param $groupId
     * @return \Forix\ProductWizard\Model\Group|null
     */
    protected function getGroup($groupId)
    {
        $group = $this->_groupFactory->create()->load($groupId);
        if ($group->getId()) {
            return $group;
        }
        return null;
    }

    protected function _beforeSave(\Magento\Framework\Model\AbstractModel $object)
    {
        $revertData = $this->loadRevertData($object);
        $object->setRenderOptionItem(false);
        if (!empty($revertData)) {
            if ($revertData['attribute_code'] != $object->getAttributeCode()) {
                $objectId = $object->getId();
                $optionValueTable = $this->_resources->getTableName(self::ITEM_OPTIONS_TABLE_NAME);
                $delete = "delete from {$optionValueTable} where item_id = $objectId and is_generated = 1";
                $this->_resources->getConnection()->query($delete);
                $object->setRenderOptionItem(true);
            } else if ($revertData['auto_add_item_option'] != $object->getData('auto_add_item_option')) {
                if ($object->getData('auto_add_item_option')) {
                    $object->setRenderOptionItem(true);
                }
            } elseif($object->getData('auto_add_item_option') && $object->getData('attribute_code')) {
                $attribute = $this->_eavAttributeRepository->get(ProductAttributeInterface::ENTITY_TYPE_CODE, $object->getData('attribute_code'));
                if($options = $attribute->getOptions()){
                    $existingItemOptions = $this->getConnection()->fetchCol(
                        $this->getConnection()->select()
                            ->from(['fpgio' => $this->getConnection()->getTableName('forix_productwizard_group_item_option')],
                                ['option_value'])
                            ->where('item_id = ?',$object->getGroupItemId())
                    );
                    $notExistingItemOptions = [];
                    foreach($options as $option){
                        $_optValue = $option->getValue();
                        if(!empty($_optValue) && !in_array($_optValue,$existingItemOptions)){
                            array_push($notExistingItemOptions,$option->getValue());
                        }
                    }
                    if(!empty($notExistingItemOptions)){
                        $object->setRenderOptionItem(true);
                        $object->setNotExistingItemOptions($notExistingItemOptions);
                    }
                }
            }
        } else {
            if ($object->getData('auto_add_item_option')) {
                $object->setRenderOptionItem(true);
            }
        }
        $group = $this->getGroup($object->getGroupId());
        if ($group) {
            $object->setData('wizard_id', $group->getData('wizard_id'));
        }
        if (!$object->getId()) {
            $object->setCreatedAt($this->_date->gmtDate());
        }
        $object->setUpdatedAt($this->_date->gmtDate());

        return parent::_beforeSave($object);
    }

    /**
     * @param \Forix\ProductWizard\Model\GroupItem $object
     * @return \Magento\Framework\Model\ResourceModel\Db\AbstractDb
     * @throws \Magento\Framework\Exception\LocalizedException
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    protected function _afterSave(\Magento\Framework\Model\AbstractModel $object)
    {
        /**
         * @var $object \Forix\ProductWizard\Model\GroupItem
         */
        $result = parent::_afterSave($object); // TODO: Change the autogenerated stub
        if ($object->getRenderOptionItem()) {
            if ($attributeCode = $object->getAttributeCode()) {
                $attribute = $this->_eavAttributeRepository->get(ProductAttributeInterface::ENTITY_TYPE_CODE, $attributeCode);
                $optionItems = [];
                switch ($attribute->getFrontendInput()) {
                    case 'select':
                    case 'multiselect':
                        $options = $attribute->getOptions();
                        $sortOrder = 0;
                        foreach ($options as $option) {
                            if($object->getNotExistingItemOptions() && !in_array($option->getValue(),$object->getNotExistingItemOptions())){
                                continue;
                            }
                            if ($option->getValue()) {
                                $newItem = [
                                    'is_generated' => 1,
                                    'option_value' => $option->getValue(),
                                    'title' => $option->getLabel(),
                                    'item_id' => $object->getId(),
                                    'item_set_id' => $object->getItemSetId(),
                                    'wizard_id' => $object->getData('wizard_id'),
                                    'sort_order' => $sortOrder++
                                ];
                                $optionItems[] = $newItem;
                            }
                        }
                        break;
                }
                if (!empty($optionItems)) {
                    $this->_resources->getConnection()->insertMultiple($this->_resources->getTableName(self::ITEM_OPTIONS_TABLE_NAME), $optionItems);
                }
            }
        }
        $optionItems = [];
        if ($selectedProducts = $object->getData('selected_products')) {
            $sortOrder = 0;
            $extOptions = [];
            $skus = [];
            $options = $object->getOptionCollection();
            foreach ($options as $option) {
                $extOptions[trim($option->getProductSku())] = $option;
            }
            $entityIds = json_decode($selectedProducts, true);
            if(count($entityIds)) {
                $groupAttributeItems = $this->getConnection()->fetchPairs(
                    $this->getConnection()->select()
                        ->from(['fpgi'=>'forix_productwizard_group_item'],['group_item_id','attribute_code'])
                        ->where('attribute_code IS NOT NULL')
                        ->where('group_id IN (?)', new \Zend_Db_Expr(
                            $this->getConnection()->select()
                                ->from(['prev_fpg'=>$this->getConnection()->getTableName('forix_productwizard_group')],['group_id'])
                                ->joinInner(['current_fpg'=>$this->getConnection()->getTableName('forix_productwizard_group')],
                                    "`current_fpg`.`group_id` = {$object->getGroupId()} AND `prev_fpg`.`wizard_id` = `current_fpg`.`wizard_id` AND `prev_fpg`.`step_id` < `current_fpg`.`step_id`",
                                    [])))
                );
                $groupAttributeItemValues = array_values($groupAttributeItems);
                $groupAttributeItemIds = array_keys($groupAttributeItems);
                $groupItemOptions = $this->getConnection()->fetchPairs(
                    $this->getConnection()->select()
                        ->from(['fpgio' => $this->getConnection()->getTableName('forix_productwizard_group_item_option')],
                            ['option_value',new \Zend_Db_Expr('CONCAT(item_id,"_",group_item_option_id)')])
                        ->where('item_id IN (?)',$groupAttributeItemIds)
                );
                
                /**
                 * @var $collection \Magento\Catalog\Model\ResourceModel\Product\Collection
                 * @var $product \Magento\Catalog\Model\Product
                 */
                $collection = $this->_productFactory->create()->getCollection();
                $collection->addAttributeToSelect(array_merge(["name", "sku"],$groupAttributeItemValues));
                $collection->addAttributeToFilter("entity_id", ['in' => $entityIds]);
                foreach ($collection as $product) {
                    $_values = [];
                    foreach($groupAttributeItemValues as $_attrCode){
                        if($product->getData($_attrCode)){
                            $_values = array_merge($_values,explode(',',$product->getData($_attrCode)));
                        }
                    }
                    $bestOn = !empty($_values)?array_intersect_key($groupItemOptions,array_flip($_values)):null;

                    if (!isset($extOptions[$product->getSku()])) {
                        $newItem = [
                            'is_generated' => 1,
                            'title' => $product->getName(),
                            'item_id' => $object->getId(),
                            'item_set_id' => $object->getItemSetId(),
                            'product_sku' => $product->getSku(),
                            'product_id' => $product->getEntityId(),
                            'wizard_id' => $object->getData('wizard_id'),
                            'best_on'   => is_null($bestOn)?null:implode(',',$bestOn),
                            'sort_order' => $sortOrder++
                        ];
                        $optionItems[] = $newItem;
                    } else {
                        if(!is_null($bestOn)){
                            $_extOption = $extOptions[$product->getSku()];
                            $_extOption->setBestOn(implode(',',array_merge($_extOption->getBestOn(),$bestOn)))->save();
                        }
                        $skus[] = $product->getSku();
                    }
                }
                $condition = $this->getConnection()->quoteInto("product_sku not in (?) and item_id = {$object->getId()}", $skus);
                $this->_resources->getConnection()
                    ->delete($this->_resources->getTableName(self::ITEM_OPTIONS_TABLE_NAME), $condition);
            }else{
                $condition = $this->getConnection()->quoteInto('product_sku is not null and item_id = ?', $object->getId());
                $this->_resources->getConnection()
                    ->delete($this->_resources->getTableName(self::ITEM_OPTIONS_TABLE_NAME), $condition);
            }
        }
        if (!empty($optionItems)) {
            $this->_resources->getConnection()->insertMultiple($this->_resources->getTableName(self::ITEM_OPTIONS_TABLE_NAME), $optionItems);
        }
        $this->updateGroupItemOption($object);
        return $result;
    }

    public function updateGroupItemOption($groupItem)
    {
        try {
            $optionCollection = $this->collectionOptionFactory->create()->addFieldToFilter('item_id', $groupItem->getId());
            if($optionCollection->getSize() > 0) {
                foreach ($optionCollection as $option) {
                    $optionFactory = $this->_groupItemOptionFactory->create()->load($option->getId());
                    $optionFactory->setItemSetId($groupItem->getItemSetId());
                    $optionFactory->setWizardId($groupItem->getWizardId());
                    $optionFactory->save();
                }
            }
        } catch (\Exception $exception) {
            //
        }
    }
}