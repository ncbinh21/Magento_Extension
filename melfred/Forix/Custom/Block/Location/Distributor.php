<?php

namespace Forix\Custom\Block\Location;

use Magento\Framework\View\Element\Template;

class Distributor extends \Magento\Framework\View\Element\Template
{
    /**
     * @var \Amasty\Storelocator\Model\ResourceModel\Location\Collection
     */
    protected $collectionLocation;

    /**
     * @var \Magento\Directory\Model\ResourceModel\Region\CollectionFactory
     */
    protected $collectionRegion;

    /**
     * @var \Magento\Company\Model\CountryInformationProvider
     */
    protected $countryInformationProvider;

    protected $_collectionLocationFactory;
    /**
     * Distributor constructor.
     * @param Template\Context $context
     * @param \Amasty\Storelocator\Model\ResourceModel\Location\CollectionFactory $collectionLocation
     * @param \Magento\Directory\Model\ResourceModel\Region\CollectionFactory $collectionRegion
     * @param \Magento\Company\Model\CountryInformationProvider $countryInformationProvider
     * @param array $data
     */
    public function __construct(
        \Magento\Framework\View\Element\Template\Context $context,
        \Amasty\Storelocator\Model\ResourceModel\Location\CollectionFactory $collectionLocationFactory,
        \Magento\Directory\Model\ResourceModel\Region\CollectionFactory $collectionRegion,
        \Magento\Company\Model\CountryInformationProvider $countryInformationProvider,
        array $data = []
    ) {
        $this->collectionRegion = $collectionRegion;
        $this->_collectionLocationFactory = $collectionLocationFactory;
        $this->countryInformationProvider = $countryInformationProvider;
        parent::__construct($context, $data);
    }

    protected function getCollectionLocation(){
        if(!$this->collectionLocation){
            $this->collectionLocation = $this->_collectionLocationFactory->create();
        }
        return $this->collectionLocation;
    }

    public function _construct()
    {
        parent::_construct(); // TODO: Change the autogenerated stub
        $this->setData([
            'cache_lifetime' => 86400,
            'cache_tags' => ['Location_Distributor']
        ]);
    }

    /**
     * @return mixed
     */
    public function getUSDistributor()
    {
        $distributor = clone($this->getCollectionLocation());
        return $distributor->addFieldToFilter('country', 'US')->addFieldToFilter('status', 1)->setOrder('position','ASC');
    }

    /**
     * @param $distributor
     * @return mixed
     */
    public function getCodeRegion($distributor)
    {
        $regionCollection = $this->collectionRegion->create();
        $region = $regionCollection->addFieldToFilter('name', ['eq' => $distributor->getState()])
            ->addFieldToFilter('country_id', ['eq' => $distributor->getCountry()])
            ->getFirstItem();
        if($region->getCode()) {
            return $region->getCode();
        }
        return $distributor->getState();
    }

    /**
     * @return mixed
     */
    public function getInternationalDistributor()
    {
        $distributor = clone($this->getCollectionLocation());
        return $distributor->addFieldToFilter('country', array('neq' => 'US'))->setOrder('country', 'ASC')->addFieldToFilter('status', 1);
    }

    /**
     * @param $countryCode
     */
    public function getCountryName($countryCode) {
        $country = $this->countryInformationProvider->getCountryNameByCode($countryCode);
        return $country;
    }
}